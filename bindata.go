// Code generated by go-bindata.
// sources:
// templates/gl.tmpl
// templates/gles2.tmpl
// templates/header.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6f\x6f\xdb\x38\xd2\x7f\x5d\x7d\x8a\x59\x35\x9b\x48\xae\x23\xa7\xcf\xb3\xc0\xe1\x92\xba\x40\xe0\xba\x42\x00\x37\x09\x9a\x6c\xdf\xdc\x1d\x02\x46\xa2\x64\x5e\x25\x52\x4b\x52\x76\x73\x5a\x7d\xf7\xc3\x90\x94\x25\x39\xce\xb6\x6f\x0a\x5c\x80\x24\x22\x39\x9c\xff\xfc\xcd\x90\xb3\x19\x2c\x44\x4a\x21\xa7\x9c\x4a\xa2\x69\x0a\x8f\x4f\x90\x8b\xbc\x80\x60\xad\x75\xa5\xce\x67\xb3\x9c\xe9\x75\xfd\x18\x25\xa2\x9c\xa5\x8f\xbf\xfd\x6d\x3d\xc3\xe5\xf0\x02\x3e\xdc\xc0\xf5\xcd\x3d\x2c\x3f\x5c\xdd\x7b\x5e\xd3\x9c\x02\xcb\x20\xba\x27\xb9\x82\xb6\xf5\xbc\xd9\x0c\xde\x3c\xd6\xac\x48\xa1\x69\xfa\x69\x24\xa3\x3c\x35\x14\x15\x49\xbe\x92\x9c\x9a\xf5\x5b\xf7\x6d\x76\x4e\x0c\xd9\x6c\x02\xb1\x53\x0a\x16\xa0\x74\xfd\xa8\x60\x32\x6b\x5b\xef\x75\x92\x0b\x28\x18\xaf\xbf\x41\x26\x29\x7d\x54\x29\x00\x40\xf5\x35\x3f\x4d\x04\xcf\x58\x7e\x0e\x79\x61\x89\x9e\xfd\x2c\x3e\xae\x2e\xe3\xbb\x73\x38\xfd\x10\xdf\xdc\x5f\xc6\x0f\x79\xe1\x79\xaf\x19\x4f\x8a\x3a\xa5\xe0\xe7\x45\xb4\xf6\xfb\xf1\x3b\xa5\x53\x26\xa2\xf5\x7b\xcf\x53\x5a\xd6\x89\x86\x2f\x54\x2a\x26\xf8\x03\xc4\x2b\xf7\x79\x61\x2d\x97\x84\xe7\x14\xa2\x85\x28\x4b\xc2\x53\xd5\xb6\x1e\x4a\xc3\x95\x23\x49\x35\x9c\xcf\x21\xba\x7f\xaa\x68\x14\x8b\x6b\x52\x52\xd0\xb2\xb6\xa6\xde\x7e\xbc\x6e\x1a\xb8\x17\xbf\x57\x15\x95\x10\x99\xc5\xb6\x85\x2a\xe3\x0f\xe8\x95\x6e\x3c\x87\xeb\xdf\x57\xab\x0b\xcf\x78\x12\xf9\x2c\xba\x15\x0c\xc5\x43\xd3\x18\xca\xb6\x0d\x76\x62\xad\x42\x47\x6c\x0a\x47\xd4\x88\xbf\x25\x92\x94\x9d\x62\x1d\x15\xcb\x20\xd7\x70\xc4\xe0\xac\x6d\xa7\xd0\x34\x94\xa7\x7b\x14\x47\xd4\x09\xfc\x40\x93\x02\x47\x56\xd0\x4e\x8e\x8d\x65\x08\x8d\x9b\x61\x99\xb1\xb8\x6d\x25\xd5\xb5\xe4\x96\x27\x9c\xee\x76\x8c\x14\xfd\x09\xca\x0e\xd4\xdb\x53\xf1\xc2\x1b\x67\x9f\x7e\xaa\x68\x4a\x33\xd8\x08\x96\x4e\x20\x98\x40\xfc\xf9\x26\x2e\x04\x49\x2b\x29\x92\x30\x48\x04\x57\x1a\x92\x35\x91\x30\xe1\xa4\xa4\xe1\x85\xe7\x31\xae\xad\xc3\xaf\x38\xd3\xc1\x90\x1e\xf0\x83\xca\xce\x0f\x48\x58\x92\x7f\x0b\x39\x85\x92\x71\x21\x2f\xcc\xec\x2e\x69\x22\xb3\x06\x73\x38\xbb\x18\x4e\x22\xa5\x99\xb4\x3c\x32\x08\x02\x4c\x84\xbc\x88\xa9\xbe\xd3\x92\xf1\x1c\xe6\x10\xdc\x7e\xbc\x8e\x57\xf1\xf2\xfe\xee\xfe\xf3\xd5\x75\x1c\x5a\xc1\x81\x3f\xa0\xf2\xc3\x10\xe6\x36\x65\x42\x70\x71\x70\x4c\x87\x56\x6d\x28\x4a\x1b\x19\x1a\x0e\xb8\x04\xf1\xea\xe1\xcb\xf2\xf3\xdd\xd5\xcd\x75\xd8\x6b\x64\x36\x1d\xe6\xbd\x5d\xb3\x82\x42\x60\xf8\xfe\x32\x87\x93\x7f\x9e\x9d\xc0\xf1\xb1\x9b\x78\x07\x27\x67\x27\xf0\xe7\x9f\x56\xec\x7b\x38\xf9\xfb\x49\x18\xc2\x86\xca\x37\x6f\x7a\xe6\x13\xc7\x1d\xb7\x0e\xb9\xbf\x66\x19\x46\xea\xe1\xd3\xdd\x02\x55\x32\xf4\x4a\x25\x84\x67\x0f\x0a\x35\x9a\x82\xff\x6b\x1a\xfd\x9a\xfa\x53\x38\x76\x6e\x3f\x36\xde\x0c\x2f\xbc\xd7\xb4\x50\x74\xb0\xe3\xfb\xf4\x3c\x65\xd9\x0b\xf1\x32\xff\x0f\xc5\xcc\x45\xb9\x69\xe0\x68\x83\x19\x7c\x4d\xb7\x8e\x04\xde\xc2\x59\x07\x7c\x7b\x28\x01\x83\x73\x84\xe7\x66\x13\xad\xa8\x52\x10\x75\x3b\x87\x28\xb2\x81\xf9\x68\xc1\xac\xcc\x66\x70\x53\x51\x1e\xaf\x0c\x84\x76\x3a\xb9\x54\x71\xbb\xd1\xaf\xfb\x86\xbc\x1b\xd1\x7f\x32\x73\x6d\x8b\xd1\x79\x46\x3a\x9f\x1f\xa6\x3d\x3e\x7e\xe6\x85\x3d\xae\x66\xae\x6d\xc3\x5d\x20\xdf\x5e\x0c\x51\x63\xa0\x5e\x60\xe1\xce\x9d\x5d\x97\xe3\x07\x60\x71\x97\xeb\x3b\xda\x17\x32\x7d\x70\xcc\x51\x46\x2f\xbf\xf5\xbc\xc9\xcc\x63\x65\x25\xa4\x06\x7f\xe1\x77\x9f\x16\x8e\x7c\x2a\xa5\x90\xca\xb7\x83\xac\xd4\xee\x4b\x19\x87\x76\xf3\x35\x57\x24\xa3\xbe\x17\x9a\x12\xb7\x10\x92\xde\x4a\x91\x61\xea\x33\x65\x81\x9d\x65\xa0\xd7\x14\x2e\x6f\xaf\x60\x4b\x14\xd8\xa2\x54\x4b\x9a\x42\x26\xa4\x59\x72\x51\x4b\x84\xa4\x50\xd9\xdd\x11\x72\xbb\x5f\x33\x85\x6c\x48\xb1\x25\x4f\x0a\x32\x52\x28\xc3\x0e\x59\x31\x05\xf1\x6a\x79\xf7\x7f\x48\xe8\xd9\x43\x3b\x14\x6e\xe2\xc4\x32\xa0\x7f\x40\xd4\xcd\xf9\x28\xc0\x87\xb6\x45\xb5\x9a\x06\xf0\x28\x40\xdb\x1a\xb6\x38\x34\x51\x40\xb9\xc8\x1f\xf1\xf0\xbc\xd3\x4c\x48\xf7\xb5\xbc\x33\xf2\x70\xd1\x6a\xc1\xf5\x6e\xc7\x17\x52\xd4\x54\x0d\xf4\xb1\x6e\x74\x2c\x90\x62\x0e\x4c\x68\x32\x98\x5d\xde\xa1\xdf\xb2\x9a\x27\x10\x10\x24\x09\xc1\xa1\x4d\x08\xd6\xcd\x1d\x82\x66\x40\x30\xb4\x5d\x7e\xef\x10\xdd\x05\xd3\xb7\x0b\x36\x26\xa3\x30\xfb\x9d\x24\xdf\xb3\xc6\x75\xa7\x46\xd2\x4a\x52\x45\xb9\x56\x40\xb8\x51\x6f\xe3\x72\x75\x67\x61\x47\xea\xca\xbd\x95\x8a\x94\xe6\xaf\x19\xd9\x13\x80\x6e\x30\x23\x93\xe5\x38\xb2\xb2\xe2\xa5\x53\xa3\x4f\x05\x27\x04\x36\x18\xc1\x5c\x52\xa2\xa9\x44\xff\xd2\x3f\x6a\x52\x80\x16\x9d\xd0\x86\x54\x6c\x3a\xaa\x1a\x2d\x72\x24\x3c\x85\x4d\xe4\x12\x60\xb7\x07\x93\x88\x54\x0c\x88\xcc\xeb\x92\x72\x6d\x4c\x30\x09\x44\x21\x13\x45\x21\xb6\xe8\x4a\xfa\x8d\x94\x55\x41\x41\xad\xc5\x56\xc1\x5a\x6c\x71\x6b\x8d\x29\xa5\x81\x71\x48\x44\x59\x11\xcd\x1e\x59\xc1\xf4\x13\x24\x6b\x9a\x7c\x55\xe7\x8e\x11\xaa\x8d\x40\x96\x17\xd1\xe7\x9a\x6b\x56\x52\xa7\x66\x10\x9a\x65\xb5\x65\x3a\x59\x1b\xaa\xc6\x4c\x24\x44\x51\x1c\x46\xf1\x32\xb0\x11\x98\xc2\x6f\x53\x38\x0b\x11\x56\x46\xf3\xcb\xbb\x29\xfc\xff\x14\xde\x86\xe7\x66\xa3\x03\xb2\x84\x14\x05\xe4\xc5\x07\x49\xb6\x97\x52\x92\x27\x75\xc5\x53\x26\x69\xa2\x5f\xe4\x6e\x78\xbc\xc4\xfd\xec\xbb\xdc\x95\x26\x3c\xa1\xa9\xa1\x4a\x69\x46\xea\x42\x8f\xb6\x64\xa4\x28\x1e\x49\xf2\xd5\xcc\x61\x28\x5c\xda\x6e\xba\x80\x85\x10\x2f\x03\x0c\xc2\xe5\xed\xd5\x38\x70\x98\x10\x21\x3c\x0a\x51\xb8\x14\x72\xa9\x69\xe3\x38\x9f\x9b\xd0\x61\x69\xdc\x38\x40\x7d\x6f\xb7\x1b\x63\xdc\xd4\xdc\x55\x1b\xa4\xdb\x38\x34\x7d\xef\x0a\x4d\xe8\xed\x8e\x6d\x9f\xdc\x2e\xeb\x7a\x74\x19\x9c\xe1\x5d\x12\xaa\xba\x42\xc0\xb3\x5d\x3e\xd2\xba\x1e\x3c\xda\xd9\xd7\xf3\x0c\xc2\xdd\x79\x18\x59\xd1\xe5\xeb\x7e\x73\x86\xc8\x83\xf6\xf9\x79\xe1\xb7\xad\x15\xdd\x83\x4e\xa7\x8a\xc5\x1d\xb0\x2d\xdc\xf3\xc2\x32\x3d\x50\x44\xba\xee\xb1\x75\x66\x8f\x13\xf2\x47\x4d\x27\x1b\xc2\x0a\xf2\x58\x50\x20\x1a\xa4\x65\x31\x45\x76\xdb\x35\x4b\xd6\x50\x92\x27\x48\x59\x96\x51\x09\x99\x14\xe5\xc0\x0f\xbd\x6f\xf6\x4f\xc2\x4f\xf4\xcf\xe9\xa0\x89\x9d\x62\x3e\x05\x8b\x68\xaf\x36\x87\x07\xe6\x4d\x76\x74\x7e\xc2\x2e\x75\x01\x8c\x33\xcd\x48\xc1\xfe\x43\x95\x73\x4a\xe4\xba\x55\x53\x69\x00\x2d\xd3\x68\x44\x25\x18\x47\x6c\xd2\x02\x08\x2c\xfa\x79\x91\x99\xda\xd0\x01\xc3\xb0\x6f\x86\x49\x30\xe9\x3a\xdf\x51\x23\x89\x9b\xb1\x44\x87\x6e\xd7\xd5\xb8\x86\x4d\x0d\x02\x29\xc0\x4a\x8a\xf2\x2a\xa2\x50\x15\xce\x8a\xa1\x16\x1a\xab\x61\xa7\x46\x1f\x05\x63\x56\xe0\x4c\xb0\xd5\x38\xba\xb5\xbb\x42\x30\x25\x1c\x1a\xef\x15\xcb\x60\x11\xf5\xcd\x3a\xba\x69\xd4\xdf\x3b\xb5\x4d\xff\x70\xf6\xbc\xbe\xd8\x56\x20\xba\xa6\xdb\xc0\xcf\x08\x2b\x68\x8a\x1a\xf5\xbe\x74\xae\xf4\x43\x97\x99\xaf\xdc\x3e\xce\x8a\x81\xf7\x63\x71\xd0\xfd\x88\xd2\x92\x26\xa2\x2c\x29\x4f\x69\x0a\x1b\x2c\xa4\xa6\x39\xe8\x03\x93\x17\xd9\x36\x8a\xa9\xbe\x95\x22\xb9\x4c\x53\x49\x95\x8a\x3a\x84\x77\x54\xbb\x08\x95\xb5\xd2\x50\x11\xce\x12\x10\x4e\xf5\xe8\x27\x39\x3e\x16\xc1\x40\x7a\x60\x6b\x76\xf8\x2c\x0c\xd6\x9f\xae\x86\x74\x07\xa2\x03\xee\xd3\xb7\xf8\xdb\x7a\xde\xab\x45\xf4\xfc\x82\xb3\x88\xc6\x37\x9c\xe0\xf0\x0d\xc7\x7b\xb5\x51\xc8\x7c\x11\xc5\xc2\xb5\x10\xc1\x64\x11\x61\xfa\x85\xc1\x58\x9d\xc0\x25\xc2\x0b\x97\x9b\x30\xb4\x41\x64\xc8\xce\xf5\x7a\xd1\x15\x4f\xe9\xb7\x8f\x68\xe2\x46\x4d\xad\xad\x12\x51\x83\x8e\x70\x7d\x90\x30\x06\x9d\x4f\xec\x95\x47\xc2\xbb\x39\xde\x70\x6c\x6e\x84\x5d\x43\xc3\x90\x64\x98\x6b\x59\xa9\xa3\x3b\x77\x2b\x51\xff\x60\xe7\xff\x1a\x5e\x4c\xb0\xaa\x7d\x72\x97\x13\xf3\x6d\x91\xbf\xef\x77\x58\x06\xbf\xec\x95\xc4\xb7\xa6\xe0\xf6\x02\x4c\x4e\x8c\x12\x38\xa5\x5c\xb3\xec\xa9\x03\x4a\x07\x8e\xfe\x90\xef\x33\xa0\x31\x41\x41\xa8\xd9\xa9\x14\x3e\x27\x74\x17\xa1\x01\xa1\xd5\xf7\x7f\xf3\x4a\xb4\xef\xb8\x1f\x2d\x45\xfd\x53\x47\x1f\xfa\x81\xeb\xc6\x77\x1b\x9b\xdd\xc3\x8b\x8d\xc9\xed\x03\x37\x9b\xe0\xd0\xcd\x66\x78\x8d\x71\xdd\xe5\x0a\x16\xc2\x34\x2e\x5a\x0d\xbb\xee\x81\x23\x97\xbc\x36\x0f\x27\xaf\xc6\xcf\x47\xc6\x12\x83\x32\xfd\x1b\x5c\xdb\xba\x3b\x4c\xbc\x82\x8f\xee\xb0\x1b\xb6\x2f\xbc\x68\x7d\xff\x35\xcb\xa0\x44\xd3\xb8\xf9\x1f\x7f\x8e\xfa\xeb\xd7\x9d\xc1\xcb\x0e\x1a\xd3\x34\xdd\x9b\x94\x13\x6f\x6f\x49\xa7\x7b\x8f\x52\x38\x0e\xd1\x6e\xa3\x32\xee\x3b\xf0\x42\x85\xaa\x8c\x5f\xa8\x1c\x54\xfc\xfc\x87\x2a\x63\xc1\xbd\x58\xfc\xc5\xa3\x55\xa7\x53\x38\x3a\x12\x46\xf7\x61\xbf\xd1\x34\x1d\xb3\x58\x80\x2f\xa9\xf6\xdb\xfd\x6c\x1c\xbd\x7c\xfd\x37\x00\x00\xff\xff\xb4\x06\xf6\x32\xf2\x15\x00\x00")

func templatesGlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGlTmpl,
		"templates/gl.tmpl",
	)
}

func templatesGlTmpl() (*asset, error) {
	bytes, err := templatesGlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gl.tmpl", size: 5618, mode: os.FileMode(420), modTime: time.Unix(1556072941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGles2Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x8f\xdb\x36\x12\x7f\x8e\x3e\xc5\x40\xdd\x6e\xa4\x3d\xaf\xbc\xcd\x15\x38\xdc\x36\x0e\xb0\x70\x1c\x61\x81\xbd\xec\xa2\x5e\xe4\xe5\x70\x08\x68\x69\x24\xf3\x42\x91\x2a\x49\xd9\xf1\xa9\xfa\xee\x87\x21\x29\x5b\xee\xb6\x68\x5f\xa2\x07\x83\x1c\xce\xfc\xe6\x2f\x67\xe8\xf9\x1c\x96\xaa\x44\xa8\x51\xa2\x66\x16\x4b\xd8\x1c\xa0\x56\xb5\x80\x64\x6b\x6d\x6b\x6e\xe7\xf3\x9a\xdb\x6d\xb7\xc9\x0a\xd5\xcc\xcb\xcd\x8f\xff\xd8\xce\xe9\x38\xfd\x09\xde\x3f\xc2\xc7\xc7\x67\x58\xbd\xbf\x7f\x8e\xa2\xbe\xbf\x06\x5e\x41\xf6\xcc\x6a\x03\xc3\x10\x45\xf3\x39\xfc\x6d\xd3\x71\x51\x42\xdf\x9f\xc8\xc4\x86\xb2\x74\x1c\x2d\x2b\xbe\xb0\x1a\xdd\xf9\x53\x58\x3b\xc9\x2b\xc7\x36\xbf\x82\x3c\x18\x05\x4b\x30\xb6\xdb\x18\xb8\x9a\x0f\x43\xf4\x5d\x51\x2b\x10\x5c\x76\x5f\xa1\xd2\x88\x1b\x53\x02\x00\xb4\x5f\xea\xeb\x42\xc9\x8a\xd7\xb7\x50\x0b\x34\xbb\x37\x9e\xf1\xc5\xb7\xfc\xf0\x70\x97\xaf\x6f\xe1\xfa\x7d\xfe\xf8\x7c\x97\x7f\x26\xe6\x37\x51\xf4\x1d\x97\x85\xe8\x4a\x84\xb8\x16\xd9\x36\x3e\xed\xdf\x1a\x5b\x72\x95\x6d\xdf\x45\x91\xb1\xba\x2b\x2c\x7c\x42\x6d\xb8\x92\x9f\x21\x7f\x08\xcb\x9f\xa2\xe8\x6a\x1e\xf1\xa6\x55\xda\x42\xbc\x8c\xc7\x65\x12\x91\xc6\xb8\x6a\x6c\xec\x57\xc6\x6a\x2e\x6b\x13\x76\x9d\x34\xac\xc2\x38\x4a\x5d\xb8\x96\x4a\xe3\x93\x56\x15\x17\x08\xdc\x80\xd5\x1d\x52\x48\xed\x16\xe1\xee\xe9\x1e\xf6\xcc\x80\x77\xb0\xd3\x58\x42\xa5\xb4\x3b\x7a\x6c\x51\xe6\x0f\x50\x28\x8d\xd0\x7a\xe9\x8c\xd0\x9e\xb7\xdc\x10\x0c\x13\x7b\x76\x30\x50\x31\x61\x1c\x1c\x41\x71\x03\xf9\xc3\x6a\xfd\x86\x18\xa3\x42\x49\x63\xcf\x94\x2f\x28\x25\xbc\x02\xfc\x05\xb2\x91\x16\x93\x82\x18\x86\x81\xcc\xea\x7b\x40\x82\x1b\x06\x07\x4b\x5b\x59\x86\xa4\x13\xbe\x3d\xb4\x78\x3b\x5a\xa6\x74\x58\xad\xd6\x4e\x1f\x1d\x7a\x2b\xa4\x3d\x4a\x7c\x62\xa2\x43\x33\xb1\xc7\x47\x2e\x40\x10\xc7\x02\xb8\xb2\x6c\x42\x5d\xad\x29\x6e\x55\x27\x0b\x48\x18\xb1\xa4\xb0\x76\xd1\x4d\x52\xf0\x61\x86\xde\xb1\xf3\x0a\x18\x2c\x16\x23\x98\x27\xd2\xa7\xd1\x76\x5a\x42\xec\x0f\x7c\x4e\x86\xe8\xe5\xc9\x6a\x1d\x47\xde\xb9\x90\x6e\xd0\xd8\x6a\x34\x28\xad\x01\x26\x9d\x79\x3b\x7f\x72\xf2\x70\x64\x0d\x35\xe3\xb5\x12\xa7\xfb\x75\xbb\x7f\xb1\xff\x2a\xed\xc2\xe0\x76\x5c\x86\x9d\xd7\x95\xaf\x82\x19\xa7\x52\x08\x4a\x60\x47\x19\xac\x35\x32\x8b\x9a\xe2\x8b\xbf\x74\x4c\x80\x55\xa3\xd2\x9e\xb5\x7c\x06\x0d\xc1\xcf\xa0\x21\xdc\x81\x10\x99\x2c\x61\x97\x85\x02\x38\xca\x50\x11\xb1\x96\x03\xd3\x75\xd7\xa0\xb4\xce\x05\x57\x40\x08\x95\x12\x42\xed\x29\x94\xf8\x95\x35\xad\x40\x30\x5b\xb5\x37\xb0\x55\x7b\x12\xed\xa8\xa4\x2c\x70\x09\x85\x6a\x5a\x66\xf9\x86\x0b\x6e\x0f\x50\x6c\xb1\xf8\x62\x6e\x03\x10\x99\x0d\xb7\x0b\xa8\x45\xf6\x73\x27\x2d\x6f\x30\x98\x99\xa4\xee\xd8\xec\xb9\x2d\xb6\x8e\xab\x77\x84\x82\x19\xa4\x6d\x96\xaf\x12\x9f\x81\x19\xfc\x38\x83\x9b\x14\x7e\xfd\xf5\x9c\xbe\x5a\xcf\xe0\xef\x33\xf8\x21\xbd\x75\x82\xf4\xcd\xe7\x50\x30\x21\xa0\x16\xef\x35\xdb\xdf\x69\xcd\x0e\xe6\x5e\x96\x5c\x63\x61\xff\x10\xdd\x61\xfc\x11\xfa\xcd\x9f\xa2\x1b\xcb\x64\x81\xa5\xe3\x2a\xb1\x62\x9d\xb0\x67\x22\x15\x13\x62\xc3\x8a\x2f\x8e\x46\xa9\x08\x65\xbb\x1b\x13\x96\x42\xbe\x4a\x28\x09\x77\x4f\xf7\xe7\x89\xa3\x82\x48\x61\xa3\x94\x08\x25\x14\x4a\xd3\xe7\x71\xb1\x70\xa9\xbb\xbc\x84\x64\x97\xf9\x72\x7a\xe7\xc5\x9d\x33\x81\xb4\x58\x04\xda\xe5\x25\xd1\x1c\xec\xbb\x85\xc7\x4f\xa3\xe3\xb5\x3d\x15\x77\xa8\xba\x53\x77\x99\xdc\xe1\x63\x11\x9a\xae\xa5\x1e\xe7\x27\x06\xf1\x86\x7e\x9e\x1d\xfd\x3b\x61\x26\xe9\xf1\x3e\x9c\x79\x31\xd6\xeb\xf1\x4a\x86\x31\x42\x9d\x87\xfc\x8b\x6b\x11\x0f\x83\x57\x7d\x6a\x3a\xa3\x29\xbe\xef\xc0\x30\xcc\xdc\x0c\x09\x60\xc1\xe9\x17\x54\xe7\xf6\xf5\x30\x84\x6b\xee\xdd\x3e\x2f\xc8\xbf\xea\x3a\xdb\x31\x2e\xd8\x46\x20\x30\x0b\xda\x43\xcc\x08\x6e\xbf\xe5\xc5\x16\x1a\x76\x80\x92\x57\x15\x6a\xa8\xb4\x6a\x26\x71\x38\xc5\xe6\xb7\x37\xe1\x1b\xc6\x67\xf4\x99\xbe\x19\xd5\x53\xb2\xcc\x8e\x93\x2b\x73\x95\x91\xfe\x0e\xdd\x55\xc7\x18\xa7\x7b\xc9\xed\x12\xb8\xe4\x96\x33\xc1\xff\x87\x26\x04\x25\x03\xa1\x58\x89\xda\x4d\x1a\x20\xcf\x2c\x39\xd1\x2a\x2e\xa9\x37\x59\x05\x0c\x96\x27\xba\xaa\xdc\x6c\x18\x1b\x03\xad\x4b\xac\x60\xa7\x78\x09\x57\xc9\x95\xc7\x4a\x21\xf1\x33\xa0\xd8\x32\x0d\x57\x24\xfc\x91\x35\x98\x06\xa9\xfb\xf3\x19\x36\x73\x1d\xc8\x00\x4d\x52\xd2\xd7\x32\x43\xa6\x48\x2e\xa6\x56\x58\x9a\x86\xa3\x19\xa7\x2c\x38\xb7\x92\xe0\x82\x9f\xc6\xd9\x93\x97\x4a\x01\xb5\x56\xd4\x92\x5e\x11\x57\xae\x12\xc9\x45\x3a\x4d\x8e\xe4\x62\x12\x9d\x5c\xfd\x6e\x78\xa8\x8b\x6a\x2c\x54\xd3\xa0\x2c\xb1\x84\x1d\x0d\x3a\x37\xbc\x4f\x81\xab\x45\xb5\xcf\x72\xb4\x4f\x5a\x15\x77\x65\xa9\xd1\x98\x6c\xec\xc0\x81\xeb\x18\xc1\xa6\x33\x16\x5a\x26\x79\x01\x4a\x7a\x13\xb3\x6f\x14\x98\x5c\x25\x13\xed\x89\x9f\xa9\xe9\x8b\x30\xf9\xe2\xdc\x31\x1d\x66\x36\x7d\xbe\xdd\x2c\xe0\xfa\x87\x13\xc9\xdd\xbf\x23\x29\x8d\x5e\x85\xb1\xb0\xcc\x72\x15\x06\x77\x72\xb5\xcc\x28\xe9\x69\x72\xae\x24\x59\x66\xb5\xc8\xd1\x06\xb6\xfc\xe1\xf3\xa7\xd5\xcf\xeb\xfb\xc7\x8f\x69\x9a\xfa\x94\x70\x42\x0a\x8f\xab\xec\x5e\x96\xf8\xf5\x03\xd9\xbc\x43\x3d\xf3\xd6\x6b\xba\xa7\x78\xd6\x49\x27\xa9\x74\xfd\xf0\xf5\xcd\x6b\xea\x90\x1a\xde\x2e\xe0\xf5\x3f\x5f\xfb\x3e\x91\x8e\x4f\x08\x4e\x2c\x37\x13\xd1\xaa\xb1\xd9\xda\x14\x4c\x56\xa4\xe6\xdf\xfc\xf6\x3f\x33\x88\xbf\x2f\xb3\xef\xcb\x78\x06\x97\xa1\x87\x5f\x86\x26\x7b\x7a\x5a\xf0\x2a\x44\xe7\x2d\xdc\x50\x93\xf6\x71\x79\x7b\x06\xed\xf2\x9b\xc4\x15\xe3\x02\x4b\xca\x12\x2f\x51\x5a\x5e\x1d\x5e\xb4\xa2\x78\x0a\xfd\xe2\x5a\x03\x45\x97\x2e\xb6\xbf\xe4\x2f\x99\x42\x4e\x02\xd3\x74\x1e\xe4\x0f\xb0\x54\x6e\xb0\x59\x33\x7d\x95\x51\x03\xd2\x4c\xd6\x08\xd9\x4a\x76\x8d\x19\x86\xe8\x15\xb5\x59\xba\xa1\x30\x0c\xfe\xed\x98\xb9\xe7\xdc\xe4\xbd\x3f\x0c\xe1\x8d\x9b\x3f\xc0\x87\x50\x6c\x0e\x76\x8a\xb7\x54\x4d\xc3\x64\x69\x82\xd8\x85\x46\x4b\x59\xcd\x9e\x0f\x2d\x66\xb9\x72\x1a\xdc\x4b\x88\x5e\x9a\xae\x4a\xfb\x3e\xd0\x87\xc1\xd7\xde\x09\xed\x82\xcf\xe0\x02\x9d\xfc\x13\xd3\xcc\x19\x3a\x69\xa0\xb5\x85\x0b\x0e\x37\x7e\x48\x78\x03\xc7\xd3\x0b\x3c\x3a\xd3\xf7\x17\x78\xa6\xde\xbf\xa2\xaf\x27\xdc\x63\x83\x4d\xc9\x6f\x67\x32\xc9\x85\x63\x5e\x39\xd2\x30\x04\x57\x9c\xaa\xa3\xf8\x32\xeb\xfb\x6c\x6a\xfd\x5f\xf3\xe0\xcf\xbd\x98\x78\xe2\x8c\x7f\x56\xcb\xd1\xab\xdf\x70\x4c\xcd\x49\xa7\xf1\xf1\x66\x4f\xbb\x5d\xdf\x8f\x60\xb9\x82\x58\xa3\x8d\xcf\xa3\x30\xd0\xa8\x98\xfc\xbd\xfb\x7f\x00\x00\x00\xff\xff\x9d\xe6\xe8\xdb\x59\x0e\x00\x00")

func templatesGles2TmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGles2Tmpl,
		"templates/gles2.tmpl",
	)
}

func templatesGles2Tmpl() (*asset, error) {
	bytes, err := templatesGles2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gles2.tmpl", size: 3673, mode: os.FileMode(420), modTime: time.Unix(1556072922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5d\x6f\xa3\x38\x14\x86\xef\xf9\x15\xa7\x4a\x54\x25\x55\x37\x6c\xd3\x28\xbb\x6a\x76\x47\x42\x84\xa1\x48\x29\x41\x2d\xd3\x4e\xaf\x2c\x1a\x3b\xc4\x23\x30\x11\x18\x75\x2a\xc4\x7f\x1f\xd9\x7c\x7f\x74\xa4\xc9\x45\x6b\xbf\x7e\xcf\x73\x8e\x0f\x36\xa8\x2a\xe8\x11\x26\xe0\x13\x46\x62\x8f\x13\x0c\x6f\x1f\xe0\x47\x7e\x00\xb3\x13\xe7\xe7\xe4\x4e\x55\x7d\xca\x4f\xe9\xdb\xe2\x10\x85\x2a\x7e\x5b\xfd\x73\x52\xc5\xf2\x7c\x03\xdb\x3d\xd8\x7b\x17\x8c\xad\xe5\x2a\xca\x84\x1e\x19\x26\x47\x40\xe6\xe3\xde\x44\xe6\x0e\xdd\x23\x29\x0a\xcd\xdc\xbb\x9a\x89\xfc\x80\x24\x4b\xa1\xb1\x43\x90\x62\x02\xff\x99\x3b\xe3\x69\xa9\xfa\xc1\x72\x71\xfa\xd2\x00\xcc\x9d\xe6\x58\xca\x04\x30\x39\x52\x46\x8a\x29\x90\x9f\x9c\xc4\x4c\x99\x10\x86\xe9\x51\x51\x26\x24\x48\x08\xa8\x57\x60\xee\xe0\x4a\x95\xb1\xa5\x1f\xcf\xd0\x8b\x65\xdf\x2e\xe7\x70\x79\x09\x17\x95\xa6\x39\x96\x61\xbb\x8f\xaf\x5d\x15\x21\xfd\xd5\x7c\xb1\x6c\x84\xfa\xfa\x93\x6e\xb9\x86\x7e\x8f\x9e\x6c\xcd\x41\x68\x5e\xd7\x26\xd1\x68\x67\x68\x36\xd2\xec\x2d\x7a\x30\x34\x5b\x99\x94\x85\x8e\xac\xc1\x4d\x55\x71\x05\xb0\xf7\x0f\x96\xfd\xa0\x7d\xaf\xa3\x2a\xa1\x6d\xad\xfa\xf3\x4e\x19\x8e\xde\x13\xd1\x9d\x7a\xe3\x25\xa7\xda\x50\xcd\x69\x84\x6e\xc2\x4a\x77\x06\x4e\xa7\x1e\xc1\xd5\x80\x2f\xbb\xde\xcd\xd0\x48\x83\x64\x7f\xf6\xec\x86\xcf\x4a\xe1\x1f\x67\x22\xe2\x13\xea\x33\x82\x01\xe0\x70\xf2\x62\xa8\x7f\x94\xf1\x7f\x11\xdf\xd4\xb6\x94\x95\xc6\xae\x2d\xed\xfb\x6a\x5c\x72\x8a\x62\x2e\x30\x15\xee\x66\x3d\xca\xeb\xfa\xd2\x81\x11\x21\xca\xf8\xed\x12\x7a\x3f\x29\x8e\x02\xbb\x01\xe9\xc0\x28\xd7\xd7\xab\x11\xe0\x7a\xf5\x39\xb0\x0e\x48\x6b\x63\x79\xd3\x44\x43\xd7\xab\x61\x03\x82\x88\xf9\xc5\x1f\xb1\x39\xca\xf8\x99\xc7\xa3\xfc\xae\x31\x6d\x9c\xf2\xca\x7d\x02\x6e\x77\xf6\xb7\xe0\x4e\x6b\x6b\x70\x71\x60\x25\xbf\x39\xfc\x09\xc7\x94\xf1\xd6\xd9\xcf\x32\x88\x3d\xe6\x13\x58\xb8\x05\x3b\x81\x3c\x17\xea\xa2\xf8\xff\x17\x10\x86\x8b\x61\xe9\x33\x58\x1a\x4a\x53\x75\x84\x85\xd9\xf6\x42\x02\x79\x2e\xc7\xcf\x5e\x90\x92\x5e\xb4\x1c\x97\x00\x3d\x0a\x43\x8f\xe1\x24\xcf\x15\x51\xb4\x58\x99\xc6\x84\xc3\xdd\xff\x45\x11\x0b\x33\x92\x38\x1e\x17\x98\x6a\xd3\x82\x2d\xd7\xf5\x2a\xdb\xac\xb9\x75\xce\x57\x3b\xcb\xc0\x8d\xbe\x9d\xcf\x24\xae\xeb\x99\xc3\xac\xce\x51\x64\x9f\xd2\x6b\x98\x12\x99\xcb\xf1\x62\x2f\xac\xaa\xa8\x5c\xf4\x08\x3e\x87\x29\x85\xbf\xf3\xfc\x1a\xb2\x8c\x30\xdc\x73\x4c\x49\x59\xc5\x96\x1c\x02\x31\x13\xb9\x5a\x7b\x91\x11\xf3\xcd\x68\x7b\xce\x47\x86\x5a\x73\xa5\xb8\xca\xe3\xb5\xf7\xcd\x9b\x4e\x3f\x8b\xc7\x27\x5e\xd6\x17\x7a\xeb\x43\x20\xdf\xdb\x09\x8f\xd3\x03\x87\x67\x12\x27\x34\x62\x08\x32\xa5\x3c\x45\x10\x7a\x3f\xa2\x78\xd3\x4c\x29\x13\xd3\x7c\xa3\x94\x95\xf4\x23\xcd\x5d\x39\xdc\xb4\x33\xb6\x3e\x46\x22\xdf\xaf\x00\x00\x00\xff\xff\xa8\x81\xf9\x51\xec\x06\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 1772, mode: os.FileMode(420), modTime: time.Unix(1556115985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/gl.tmpl": templatesGlTmpl,
	"templates/gles2.tmpl": templatesGles2Tmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"gl.tmpl": &bintree{templatesGlTmpl, map[string]*bintree{}},
		"gles2.tmpl": &bintree{templatesGles2Tmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

