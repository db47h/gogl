// Code generated by go-bindata.
// sources:
// templates/gl.tmpl
// templates/gles2.tmpl
// templates/header.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6f\x6f\xdb\x38\xd2\x7f\x5d\x7d\x8a\x59\x35\x9b\x48\xae\x23\xa7\xcf\xb3\xc0\xe1\x92\xba\x40\xe0\xba\x42\x00\x37\x09\xea\x6c\xdf\xdc\x1d\x02\x5a\xa2\x64\x5e\x65\x52\x4b\x52\x76\x73\x5a\x7d\xf7\xc3\x90\x94\x25\x39\xce\xb6\x6f\x0a\x5c\x80\x24\x22\x39\x9c\xbf\x3f\xce\x0c\x39\x99\xc0\x4c\xa4\x14\x72\xca\xa9\x24\x9a\xa6\xb0\x7a\x82\x5c\xe4\x05\x04\x6b\xad\x4b\x75\x39\x99\xe4\x4c\xaf\xab\x55\x94\x88\xcd\x24\x5d\xfd\xf6\xb7\xf5\x04\x97\xc3\x2b\xf8\x70\x07\xb7\x77\x0f\x30\xff\x70\xf3\xe0\x79\x75\x7d\x0e\x2c\x83\xe8\x81\xe4\x0a\x9a\xc6\xf3\x26\x13\x78\xb3\xaa\x58\x91\x42\x5d\x77\xd3\x48\x46\x79\x6a\x28\x4a\x92\x7c\x25\x39\x35\xeb\xf7\xee\xdb\xec\x1c\x19\xb2\xc9\x08\x62\xa7\x14\xcc\x40\xe9\x6a\xa5\x60\x34\x69\x1a\xef\x75\x92\x0b\x28\x18\xaf\xbe\x41\x26\x29\x5d\xa9\x14\x00\xa0\xfc\x9a\x9f\x27\x82\x67\x2c\xbf\x84\xbc\xb0\x44\xcf\x7e\x66\x1f\x17\xd7\xf1\xf2\x12\xce\x3f\xc4\x77\x0f\xd7\xf1\x63\x5e\x78\xde\x6b\xc6\x93\xa2\x4a\x29\xf8\x79\x11\xad\xfd\x6e\xfc\x4e\xe9\x94\x89\x68\xfd\xde\xf3\x94\x96\x55\xa2\xe1\x0b\x95\x8a\x09\xfe\x08\xf1\xc2\x7d\x5e\x59\xcb\x25\xe1\x39\x85\x68\x26\x36\x1b\xc2\x53\xd5\x34\x1e\x4a\xc3\x95\x13\x49\x35\x5c\x4e\x21\x7a\x78\x2a\x69\x14\x8b\x5b\xb2\xa1\xa0\x65\x65\x4d\xbd\xff\x78\x5b\xd7\xf0\x20\x7e\x2f\x4b\x2a\x21\x32\x8b\x4d\x03\x65\xc6\x1f\xd1\x2b\xed\x78\x0a\xb7\xbf\x2f\x16\x57\x9e\xf1\x24\xf2\x99\xb5\x2b\x18\x8a\xc7\xba\x36\x94\x4d\x13\xec\xc5\x5a\x85\x4e\xd8\x18\x4e\xa8\x11\x7f\x4f\x24\xd9\xb4\x8a\xb5\x54\x2c\x83\x5c\xc3\x09\x83\x8b\xa6\x19\x43\x5d\x53\x9e\x1e\x50\x9c\x50\x27\xf0\x03\x4d\x0a\x1c\x59\x41\x7b\x39\x36\x96\x21\xd4\x6e\x86\x65\xc6\xe2\xa6\x91\x54\x57\x92\x5b\x9e\x70\xbe\xdf\x31\x50\xf4\x27\x28\xdb\x53\xef\x40\xc5\x2b\x6f\x88\x3e\xfd\x54\xd2\x94\x66\xb0\x15\x2c\x1d\x41\x30\x82\xf8\xf3\x5d\x5c\x08\x92\x96\x52\x24\x61\x90\x08\xae\x34\x24\x6b\x22\x61\xc4\xc9\x86\x86\x57\x9e\xc7\xb8\xb6\x0e\xbf\xe1\x4c\x07\x7d\x7a\xc0\x0f\x2a\x5b\x3f\x20\xe1\x86\xfc\x5b\xc8\x31\x6c\x18\x17\xf2\xca\xcc\xee\x41\x13\x99\x35\x98\xc2\xc5\x55\x7f\x12\x29\xcd\xa4\xe5\x91\x41\x10\x20\x10\xf2\x22\xa6\x7a\xa9\x25\xe3\x39\x4c\x21\xb8\xff\x78\x1b\x2f\xe2\xf9\xc3\xf2\xe1\xf3\xcd\x6d\x1c\x5a\xc1\x81\xdf\xa3\xf2\xc3\x10\xa6\x16\x32\x21\xb8\x38\x38\xa6\x7d\xab\xb6\x14\xa5\x0d\x0c\x0d\x7b\x5c\x82\x78\xf1\xf8\x65\xfe\x79\x79\x73\x77\x1b\x76\x1a\x99\x4d\xc7\x79\xef\xd6\xac\xa0\x10\x18\xbe\xbf\x4c\xe1\xec\x9f\x17\x67\x70\x7a\xea\x26\xde\xc1\xd9\xc5\x19\xfc\xf9\xa7\x15\xfb\x1e\xce\xfe\x7e\x16\x86\xb0\xa5\xf2\xcd\x9b\x8e\xf9\xc8\x71\xc7\xad\x7d\xee\xaf\x59\x86\x91\x7a\xfc\xb4\x9c\xa1\x4a\x86\x5e\xa9\x84\xf0\xec\x51\xa1\x46\x63\xf0\x7f\x4d\xa3\x5f\x53\x7f\x0c\xa7\xce\xed\xa7\xc6\x9b\xe1\x95\xf7\x9a\x16\x8a\xf6\x76\x7c\x9f\x9e\xa7\x2c\x7b\x21\x5e\xe6\xff\xb1\x98\xb9\x28\xd7\x35\x9c\x6c\x11\xc1\xb7\x74\xe7\x48\xe0\x2d\x5c\xb4\x89\xef\x20\x4b\x40\xef\x1c\xe1\xb9\xd9\x46\x0b\xaa\x14\x44\xed\xce\x7e\x16\xd9\xc2\x74\xb0\x60\x56\x26\x13\xb8\x2b\x29\x8f\x17\x26\x85\xb6\x3a\x39\xa8\xb8\xdd\xe8\xd7\x43\x43\xde\x0d\xe8\x3f\x99\xb9\xa6\xc1\xe8\x3c\x23\x9d\x4e\x8f\xd3\x9e\x9e\x3e\xf3\xc2\x01\x57\x33\xd7\x34\xe1\x3e\x90\x6f\xaf\xfa\x59\xa3\xa7\x5e\x60\xd3\x9d\x3b\xbb\x0e\xe3\x47\xd2\xe2\x1e\xeb\x7b\xda\x17\x90\xde\x3b\xe6\x28\xa3\x93\xdf\x78\xde\x68\xe2\xb1\x4d\x29\xa4\x06\x7f\xe6\xb7\x9f\x36\x1d\xf9\x54\x4a\x21\x95\x6f\x07\xd9\x46\xbb\x2f\x65\x1c\xda\xce\x57\x5c\x91\x8c\xfa\x5e\x68\x4a\xdc\x4c\x48\x7a\x2f\x45\x86\xd0\x67\xca\x26\x76\x96\x81\x5e\x53\xb8\xbe\xbf\x81\x1d\x51\x60\x8b\x52\x25\x69\x0a\x99\x90\x66\xc9\x45\x2d\x11\x92\x42\x69\x77\x47\xc8\xed\x61\xcd\x14\xb2\x21\xc5\x8e\x3c\x29\xc8\x48\xa1\x0c\x3b\x64\xc5\x14\xc4\x8b\xf9\xf2\xff\x90\xd0\xb3\x87\xb6\x2f\xdc\xc6\xa9\x3f\xe3\x8a\x30\xee\xc5\x5c\x77\xd9\x4a\x15\xd2\x7d\xcd\x97\x86\x17\x2e\x5a\x09\x5c\xef\x77\x7c\x21\x45\x45\x55\x4f\x96\x75\x91\x63\x81\x14\x53\x60\x42\x93\xde\xec\x7c\x89\x3e\xc9\x2a\x9e\x40\x40\x90\x24\x04\x97\x49\x42\xb0\x2e\x6c\xb3\x63\x06\x04\xc3\xd6\x62\x77\x9f\xad\x5d\xa0\x7c\xbb\x60\xfd\x3d\x08\xa1\xdf\x4a\xf2\x3d\x6b\x5c\x7b\x22\x24\x2d\x25\x55\x94\x6b\x05\x84\x1b\xf5\xb6\x0e\x87\x7b\x0b\x5b\x52\x57\xca\xad\x54\xa4\x34\x7f\xcd\xc8\xa2\x1b\xdd\x60\x46\x06\xc1\x38\xb2\xb2\xe2\xb9\x53\xa3\x0b\xb3\x13\x02\x5b\x8c\x4e\x2e\x29\xd1\x54\xa2\x7f\xe9\x1f\x15\x29\x40\x8b\x56\x68\x4d\x4a\x36\x1e\x54\x84\x06\x39\x12\x9e\xc2\x36\x72\xc1\xdd\xef\x41\x80\x90\x92\x01\x91\x79\xb5\xa1\x5c\x1b\x13\x0c\x38\x28\x64\xa2\x28\xc4\x0e\x5d\x49\xbf\x91\x4d\x59\x50\x50\x6b\xb1\x53\xb0\x16\x3b\xdc\x5a\x21\x5c\x34\x30\x0e\x89\xd8\x94\x44\xb3\x15\x2b\x98\x7e\x82\x64\x4d\x93\xaf\xea\xd2\x31\x42\xb5\x31\x49\xe5\x45\xf4\xb9\xe2\x9a\x6d\xa8\x53\x33\x08\xcd\xb2\xda\x31\x9d\xac\x0d\x55\x6d\x26\x12\xa2\x28\x0e\xa3\x78\x1e\xd8\x08\x8c\xe1\xb7\x31\x5c\x84\x98\x32\x06\xf3\xf3\xe5\x18\xfe\x7f\x0c\x6f\xc3\x4b\xb3\xd1\x25\xa9\x84\x14\x05\xe4\xc5\x07\x49\x76\xd7\x52\x92\x27\x75\xc3\x53\x26\x69\xa2\x5f\xe4\x6e\x78\xbc\xc4\xfd\xe2\xbb\xdc\x95\x26\x3c\xa1\xa9\xa1\x4a\x69\x46\xaa\x42\x0f\xb6\x64\xa4\x28\x56\x24\xf9\x6a\xe6\x30\x14\x0e\xb6\xdb\x36\x60\x21\xc4\xf3\x00\x83\x70\x7d\x7f\x33\x0c\x1c\x02\x22\x84\x95\x10\x85\x83\x90\x83\xa6\x8d\xe3\x74\x6a\x42\x87\x65\x6f\xeb\x92\xe5\x7b\xbb\xdd\x18\xe3\xa6\xa6\xae\x92\x20\xdd\xd6\x65\xca\xf7\xae\x88\x84\xde\xfe\xd8\x76\xe0\x76\xa8\xeb\x32\x47\xef\x0c\xef\x41\xa8\xaa\x12\x93\x99\xed\xe0\x91\xd6\xf5\xd7\xd1\xde\xbe\x8e\x67\x10\xee\xcf\xc3\xc0\x8a\x16\xaf\x87\x8d\x17\xfd\x03\x8c\x7d\x7e\x5e\xf8\x4d\x63\x45\xd7\x35\x60\x6d\x85\x76\x3c\x5f\xe2\x8c\x49\xbb\xe3\xa3\x45\x63\x7c\xa4\x40\xb4\x9d\x61\xe3\xcc\x1e\x02\xf2\x47\x4d\x27\x5b\xc2\x0a\xb2\x2a\x28\x10\x0d\xd2\xb2\x18\x23\xbb\xdd\x9a\x25\x6b\xd8\x90\x27\x48\x59\x96\x51\x09\x99\x14\x9b\x9e\x1f\x3a\xdf\x1c\x9e\x84\x9f\xe8\x9f\xf3\x5e\x83\x3a\x46\x3c\x05\xb3\xe8\xa0\xee\x86\x47\xe6\x0d\x3a\x5a\x3f\x61\x07\x3a\x03\xc6\x99\x66\xa4\x60\xff\xa1\xca\x39\x25\x72\x9d\xa8\xa9\x22\x80\x96\x69\x34\xa2\x14\x8c\x63\x6e\xd2\x02\x08\xcc\xba\x79\x91\x99\xda\xd0\x26\x86\x7e\x4f\x0c\xa3\x60\xd4\x76\xb5\x83\x26\x11\x37\x63\xf9\x0d\xdd\xae\x9b\x61\x7d\x1a\x9b\x0c\xa4\x00\xab\x24\xca\x2b\x89\x42\x55\x38\x2b\xfa\x5a\x68\xac\x74\xad\x1a\x5d\x14\x8c\x59\x81\x33\xc1\x56\xda\xe8\xde\xee\x0a\xc1\x94\x67\xa8\xbd\x57\x2c\x83\x59\xd4\x35\xe2\xe8\xa6\x41\xef\xee\xd4\x36\xbd\xc1\xc5\xf3\xfa\x62\xcb\x7c\x74\x4b\x77\x81\x9f\x11\x56\xd0\x14\x35\xea\x7c\xe9\x5c\xe9\x87\x0e\x99\xaf\xdc\x3e\xce\x8a\x9e\xf7\x63\x71\xd4\xfd\x98\xa5\x25\x4d\xc4\x66\x43\x79\x4a\x53\xd8\x62\x21\x35\x85\xbf\x0b\x4c\x5e\x64\xbb\x28\xa6\xfa\x5e\x8a\xe4\x3a\x4d\x25\x55\x2a\x6a\x33\xbc\xa3\xda\x47\x68\x53\x29\x0d\x25\xe1\x2c\x01\xe1\x54\x8f\x7e\x92\xe3\x63\x11\xf4\xa4\x07\xb6\x66\x87\xcf\xc2\x60\xfd\xe9\x6a\x48\x7b\x20\xda\xc4\x7d\xfe\x16\x7f\x1b\xcf\x7b\x35\x8b\x9e\x5f\x5e\x66\xd1\xf0\xf6\x12\x1c\xbf\xbd\x78\xaf\xb6\x0a\x99\xcf\xa2\x58\xb8\x16\x22\x18\xcd\x22\x84\x5f\x18\x0c\xd5\x09\x1c\x10\x5e\xb8\xb8\x84\xa1\x0d\x22\x43\x76\xae\x8f\x8b\x6e\x78\x4a\xbf\x7d\x44\x13\xb7\x6a\x6c\x6d\x95\x98\x35\xe8\x20\xaf\xf7\x00\x63\xb2\xf3\x99\xbd\xce\x48\x78\x37\xc5\xdb\x8b\xc5\x46\xd8\x36\x34\x0c\x49\xfa\x58\xcb\x36\x3a\x5a\xba\x1b\x87\xfa\x07\xbb\xfc\x57\xff\xd2\x81\x55\xed\x93\xbb\x78\x98\x6f\x9b\xf9\xbb\x7e\x87\x65\xf0\xcb\x41\x49\x7c\x6b\x0a\x6e\x27\xc0\x60\x62\x00\xe0\x94\x72\xcd\xb2\xa7\x36\x51\xba\xe4\xe8\xf7\xf9\x3e\x4b\x34\x26\x28\x98\x6a\xf6\x2a\x85\xcf\x09\xdd\x25\xa7\x47\x68\xf5\xfd\xdf\xbc\xee\x1c\x3a\xee\x47\x4b\x51\xf7\x8c\xd1\x85\xbe\xe7\xba\xe1\xbd\xc5\xa2\xbb\x7f\x69\x31\xd8\x3e\x72\x6b\x09\x8e\xdd\x5a\xfa\x57\x14\xd7\x5d\x2e\x60\x26\x4c\xe3\xa2\x55\xbf\xeb\xee\x39\x72\xce\x2b\xf3\x28\xf2\x6a\xf8\x34\x64\x2c\x31\x59\xa6\x7b\x5f\x6b\x1a\x77\x3f\x89\x17\xf0\xd1\x1d\x76\xc3\xf6\x85\xd7\xaa\xef\xbf\x54\x99\x2c\x51\xd7\x6e\xfe\xc7\x9f\x9a\xfe\xfa\xe5\xa6\xf7\x6a\x83\xc6\xd4\x75\xfb\xde\xe4\xc4\xdb\x1b\xd0\xf9\xc1\x83\x13\x8e\x43\xb4\xdb\xa8\x8c\xfb\x8e\xbc\x3e\xa1\x2a\xc3\xd7\x27\x97\x2a\x7e\xfe\x23\x94\xb1\xe0\x41\xcc\xfe\xe2\x41\xaa\xd5\x29\x1c\x1c\x09\xa3\x7b\xbf\xdf\xa8\xeb\x96\x59\x2c\xc0\x97\x54\xfb\xcd\x21\x1a\x07\xaf\x5a\xff\x0d\x00\x00\xff\xff\x70\xaa\x93\x95\xce\x15\x00\x00")

func templatesGlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGlTmpl,
		"templates/gl.tmpl",
	)
}

func templatesGlTmpl() (*asset, error) {
	bytes, err := templatesGlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gl.tmpl", size: 5582, mode: os.FileMode(420), modTime: time.Unix(1557248544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGles2Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x8f\xdb\x36\x12\x7f\x8e\x3e\xc5\x40\xdd\x6e\xa4\x3d\xaf\xbc\xcd\x15\x38\xdc\x36\x0e\xb0\x70\x1c\x61\x81\xbd\xec\xa2\x5e\xe4\xe5\x70\x08\x68\x69\x24\xf3\x42\x91\x2a\x49\xd9\xf1\xa9\xfa\xee\x87\x21\x29\x5b\xee\xb6\x68\x5f\xa2\x07\x83\x1c\xce\xfc\xe6\x2f\x67\xe8\xf9\x1c\x96\xaa\x44\xa8\x51\xa2\x66\x16\x4b\xd8\x1c\xa0\x56\xb5\x80\x64\x6b\x6d\x6b\x6e\xe7\xf3\x9a\xdb\x6d\xb7\xc9\x0a\xd5\xcc\xcb\xcd\x8f\xff\xd8\xce\xe9\x38\xfd\x09\xde\x3f\xc2\xc7\xc7\x67\x58\xbd\xbf\x7f\x8e\xa2\xbe\xbf\x06\x5e\x41\xf6\xcc\x6a\x03\xc3\x10\x45\xf3\x39\xfc\x6d\xd3\x71\x51\x42\xdf\x9f\xc8\xc4\x86\xb2\x74\x1c\x2d\x2b\xbe\xb0\x1a\xdd\xf9\x53\x58\x3b\xc9\x2b\xc7\x36\xbf\x82\x3c\x18\x05\x4b\x30\xb6\xdb\x18\xb8\x9a\x0f\x43\xf4\x5d\x51\x2b\x10\x5c\x76\x5f\xa1\xd2\x88\x1b\x53\x02\x00\xb4\x5f\xea\xeb\x42\xc9\x8a\xd7\xb7\x50\x0b\x34\xbb\x37\x9e\xf1\xc5\xb7\xfc\xf0\x70\x97\xaf\x6f\xe1\xfa\x7d\xfe\xf8\x7c\x97\x7f\x26\xe6\x37\x51\xf4\x1d\x97\x85\xe8\x4a\x84\xb8\x16\xd9\x36\x3e\xed\xdf\x1a\x5b\x72\x95\x6d\xdf\x45\x91\xb1\xba\x2b\x2c\x7c\x42\x6d\xb8\x92\x9f\x21\x7f\x08\xcb\x9f\xa2\xe8\x6a\x1e\xf1\xa6\x55\xda\x42\xbc\x8c\xc7\x65\x12\x91\xc6\xb8\x6a\x6c\xec\x57\xc6\x6a\x2e\x6b\x13\x76\x9d\x34\xac\xc2\x38\x4a\x5d\xb8\x96\x4a\xe3\x93\x56\x15\x17\x08\xdc\x80\xd5\x1d\x52\x48\xed\x16\xe1\xee\xe9\x1e\xf6\xcc\x80\x77\xb0\xd3\x58\x42\xa5\xb4\x3b\x7a\x6c\x51\xe6\x0f\x50\x28\x8d\xd0\x7a\xe9\x8c\xd0\x9e\xb7\xdc\x10\x0c\x13\x7b\x76\x30\x50\x31\x61\x1c\x1c\x41\x71\x03\xf9\xc3\x6a\xfd\x86\x18\xa3\x42\x49\x63\xcf\x94\x2f\x5c\x4a\xa6\x94\x90\x50\x92\xb5\x87\x16\x6f\x47\xad\x4a\x87\xd5\x6a\xed\xb0\xe8\xd0\x6b\x90\xf6\x28\xf1\x89\x89\x0e\xcd\x44\x97\x8f\x4a\x80\x20\x8e\x05\x70\x65\xd9\x84\xba\x5a\x53\x4c\xaa\x4e\x16\x90\x30\x62\x49\x61\xed\x22\x97\xa4\xe0\x43\x08\xbd\x63\xe7\x15\x30\x58\x2c\x46\x30\x4f\xa4\x4f\xa3\xed\xb4\x84\xd8\x1f\xf8\x78\x0f\xd1\xcb\x93\xd5\x3a\x8e\xbc\x73\x21\x95\xa0\xb1\xd5\x68\x50\x5a\x03\x4c\x3a\xf3\x76\xfe\xe4\xe4\xe1\xc8\x1a\xea\xc1\x6b\x25\x4e\xf7\xeb\x76\xff\x62\xff\x55\xda\x85\xc1\xed\xb8\x0c\x3b\xaf\x2b\x5f\x05\x33\x4e\x69\x0e\x4a\x60\x47\xd9\xa9\x35\x32\x8b\x9a\xe2\x8b\xbf\x74\x4c\x80\x55\xa3\xd2\x9e\xb5\x7c\x06\x0d\xc1\xcf\xa0\x21\xdc\x81\x10\x99\x2c\x61\x97\x85\xe4\x1e\x65\xa8\x40\x58\xcb\x81\xe9\xba\x6b\x50\x5a\xe7\x82\x2b\x0e\x84\x4a\x09\xa1\xf6\x14\x4a\xfc\xca\x9a\x56\x20\x98\xad\xda\x1b\xd8\xaa\x3d\x89\x76\x54\x2e\x16\xb8\x84\x42\x35\x2d\xb3\x7c\xc3\x05\xb7\x07\x28\xb6\x58\x7c\x31\xb7\x01\x88\xcc\x86\xdb\x05\xd4\x22\xfb\xb9\x93\x96\x37\x18\xcc\x4c\x52\x77\x6c\xf6\xdc\x16\x5b\xc7\xd5\x3b\x42\xc1\x0c\xd2\x36\xcb\x57\x89\xcf\xc0\x0c\x7e\x9c\xc1\x4d\x0a\xbf\xfe\x7a\x4e\x5f\xad\x67\xf0\xf7\x19\xfc\x90\xde\x3a\x41\xfa\xe6\x73\x28\x98\x10\x50\x8b\xf7\x9a\xed\xef\xb4\x66\x07\x73\x2f\x4b\xae\xb1\xb0\x7f\x88\xee\x30\xfe\x08\xfd\xe6\x4f\xd1\x8d\x65\xb2\xc0\xd2\x71\x95\x58\xb1\x4e\xd8\x33\x91\x8a\x09\xb1\x61\xc5\x17\x47\xa3\x54\x84\xb2\xdd\x8d\x09\x4b\x21\x5f\x25\x94\x84\xbb\xa7\xfb\xf3\xc4\x51\x41\xa4\xb0\x51\x4a\x84\x12\x0a\xa5\xe9\xf3\xb8\x58\xb8\xd4\x5d\x5e\x42\xb2\xcb\x7c\x39\xbd\xf3\xe2\xce\x99\x40\x5a\x2c\x02\xed\xf2\x92\x68\x0e\xf6\xdd\xc2\xe3\xa7\xd1\xf1\xda\x9e\x8a\x3b\x54\xdd\xa9\x73\x4c\xee\xf0\xb1\x08\x4d\xd7\x52\xff\xf2\xd3\x80\x78\x43\xaf\xce\x8e\xfe\x9d\x30\x93\xf4\x78\x1f\xce\xbc\x18\xeb\xf5\x78\x25\xc3\x88\xc0\x5f\xc0\xf9\x17\xd7\x22\x1e\x06\xaf\xba\xef\x01\xa9\x3f\x8d\xfb\xd5\x9a\x28\x6e\x4e\xcc\x5c\x33\x0a\x60\xc1\xe9\x17\x54\xe7\xf6\xf5\x30\x84\x6b\xee\xdd\x3e\x2f\xc8\xbf\xea\x3a\xdb\x31\x2e\xd8\x46\x20\x30\x0b\xda\x43\xcc\x08\x6e\xbf\xe5\xc5\x16\x1a\x76\x80\x92\x57\x15\x6a\xa8\xb4\x6a\x26\x71\x38\xc5\xe6\xb7\x37\xe1\x1b\xc6\x67\xf4\x99\xbe\x19\xd5\x53\xb2\xcc\x8e\x53\x29\x73\x95\x91\xfe\x0e\xdd\x55\xc7\x18\xa7\x7b\xc9\xed\x12\xb8\xe4\x96\x33\xc1\xff\x87\x26\x04\x25\x03\xa1\x58\x89\xda\x4d\x11\x20\xcf\x2c\x39\xd1\x2a\x2e\xa9\x37\x59\x05\x0c\x96\x27\xba\xaa\xdc\x6c\x18\x1b\x03\xad\x4b\xac\x60\xa7\x78\x09\x57\xc9\x95\xc7\x4a\x21\xf1\x33\xa0\xd8\x32\x0d\x57\x24\xfc\x91\x35\x98\x06\xa9\xfb\xf3\xf9\x34\x73\x1d\xc8\x00\x4d\x49\xd2\xd7\x32\x43\xa6\x48\x2e\xa6\x56\x58\x9a\x74\xa3\x19\xa7\x2c\x38\xb7\x92\xe0\x82\x9f\xb4\xd9\x93\x97\x4a\x01\xb5\x56\xd4\x92\x5e\x11\x57\xae\x12\xc9\x45\x3a\x4d\x8e\xe4\x62\x12\x9d\x5c\xfd\x6e\x78\xa8\x8b\x6a\x2c\x54\xd3\xa0\x2c\xb1\x84\x1d\x0d\x3a\x37\x98\x4f\x81\xab\x45\xb5\xcf\x72\xb4\x4f\x5a\x15\x77\x65\xa9\xd1\x98\x6c\xec\xc0\x81\xeb\x18\xc1\xa6\x33\x16\x5a\x26\x79\x01\x4a\x7a\x13\xb3\x6f\x14\x98\x5c\x25\x13\xed\x89\x9f\xa9\xe9\x8b\x30\xf9\xe2\xdc\x31\x1d\x66\x36\x7d\xbe\xdd\x2c\xe0\xfa\x87\x13\xc9\xdd\xbf\x23\x29\x8d\x5e\x85\xb1\xb0\xcc\x72\x15\x06\x77\x72\xb5\xcc\x28\xe9\x69\x72\xae\x24\x59\x66\xb5\xc8\xd1\x06\xb6\xfc\xe1\xf3\xa7\xd5\xcf\xeb\xfb\xc7\x8f\x69\x9a\xfa\x94\x70\x42\x0a\x0f\xa7\xec\x5e\x96\xf8\xf5\x03\xd9\xbc\x43\x3d\xf3\xd6\x6b\xba\xa7\x78\xd6\x49\x27\xa9\x74\xfd\xf0\xf5\xcd\x6b\xea\x90\x1a\xde\x2e\xe0\xf5\x3f\x5f\xfb\x3e\x91\x8e\x4f\x08\x4e\x2c\x37\x13\xd1\xaa\xb1\xd9\xda\x14\x4c\x56\xa4\xe6\xdf\xfc\xf6\x3f\x33\x88\xbf\x2f\xb3\xef\xcb\x78\x06\x97\xa1\x87\x5f\x86\x26\x7b\x7a\x5a\xf0\x2a\x44\xe7\x2d\xdc\x50\x93\xf6\x71\x79\x7b\x06\xed\xf2\x9b\xc4\x15\xe3\x02\x4b\xca\x12\x2f\x51\x5a\x5e\x1d\x5e\xb4\xa2\x78\x0a\xfd\xe2\x5a\x03\x45\x97\x2e\xb6\xbf\xe4\x2f\x99\x42\x4e\x02\xd3\x74\x1e\xe4\x0f\xb0\x54\x6e\xb0\x59\x33\x7d\x95\x51\x03\xd2\x4c\xd6\x08\xd9\x4a\x76\x8d\x19\x86\xe8\x15\xb5\x59\xba\xa1\x30\x0c\xe1\x5d\xe8\x9e\x73\x93\xb7\xfc\x30\x84\xf7\x6b\xfe\x00\x1f\x42\xb1\x39\xd8\x29\xde\x52\x35\x0d\x93\xa5\x09\x62\x17\x1a\x2d\x65\x35\x7b\x3e\xb4\x98\xe5\xca\x69\x70\x2f\x21\x7a\x69\xba\x2a\xed\xfb\x40\x1f\x06\x5f\x7b\x27\xb4\x0b\x3e\x83\x0b\x74\xf2\x4f\x4c\x33\x67\xe8\xa4\x81\xd6\x16\x2e\x38\xdc\xf8\x21\xe1\x0d\x1c\x4f\x2f\xf0\xe8\x4c\xdf\x5f\xe0\x99\x7a\xff\x42\xbe\x9e\x70\x8f\x0d\x36\x25\xbf\x9d\xc9\x24\x17\x8e\x79\xe5\x48\xc3\x10\x5c\x71\xaa\x8e\xe2\xcb\xac\xef\xb3\xa9\xf5\x7f\xcd\x83\x3f\xf7\x62\xe2\x89\x33\xfe\x59\x2d\x47\xaf\x7e\xc3\x31\x35\x27\x9d\xc6\xc7\x9b\x3d\xed\x76\x7d\x3f\x82\xe5\x0a\x62\x8d\x36\x3e\x8f\xc2\x40\xa3\x62\xf2\xd7\xed\xff\x01\x00\x00\xff\xff\x6b\x3f\x06\x77\x35\x0e\x00\x00")

func templatesGles2TmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGles2Tmpl,
		"templates/gles2.tmpl",
	)
}

func templatesGles2Tmpl() (*asset, error) {
	bytes, err := templatesGles2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gles2.tmpl", size: 3637, mode: os.FileMode(420), modTime: time.Unix(1557248616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5d\x6f\xa3\x38\x14\x86\xef\xf9\x15\xa7\x4a\x54\x25\x55\x37\x6c\xd3\x28\xbb\x6a\x76\x47\x42\x84\xa1\x48\x29\x41\x2d\xd3\x4e\xaf\x2c\x1a\x3b\xc4\x23\x30\x11\x18\x75\x2a\xc4\x7f\x1f\xd9\x7c\x7f\x74\xa4\xc9\x45\x6b\xbf\x7e\xcf\x73\x8e\x0f\x36\xa8\x2a\xe8\x11\x26\xe0\x13\x46\x62\x8f\x13\x0c\x6f\x1f\xe0\x47\x7e\x00\xb3\x13\xe7\xe7\xe4\x4e\x55\x7d\xca\x4f\xe9\xdb\xe2\x10\x85\x2a\x7e\x5b\xfd\x73\x52\xc5\xf2\x7c\x03\xdb\x3d\xd8\x7b\x17\x8c\xad\xe5\x2a\xca\x84\x1e\x19\x26\x47\x40\xe6\xe3\xde\x44\xe6\x0e\xdd\x23\x29\x0a\xcd\xdc\xbb\x9a\x89\xfc\x80\x24\x4b\xa1\xb1\x43\x90\x62\x02\xff\x99\x3b\xe3\x69\xa9\xfa\xc1\x72\x71\xfa\xd2\x00\xcc\x9d\xe6\x58\xca\x04\x30\x39\x52\x46\x8a\x29\x90\x9f\x9c\xc4\x4c\x99\x10\x86\xe9\x51\x51\x26\x24\x48\x08\xa8\x57\x60\xee\xe0\x4a\x95\xb1\xa5\x1f\xcf\xd0\x8b\x65\xdf\x2e\xe7\x70\x79\x09\x17\x95\xa6\x39\x96\x61\xbb\x8f\xaf\x5d\x15\x21\xfd\xd5\x7c\xb1\x6c\x84\xfa\xfa\x93\x6e\xb9\x86\x7e\x8f\x9e\x6c\xcd\x41\x68\x5e\xd7\x26\xd1\x68\x67\x68\x36\xd2\xec\x2d\x7a\x30\x34\x5b\x99\x94\x85\x8e\xac\xc1\x4d\x55\x71\x05\xb0\xf7\x0f\x96\xfd\xa0\x7d\xaf\xa3\x2a\xa1\x6d\xad\xfa\xf3\x4e\x19\x8e\xde\x13\xd1\x9d\x7a\xe3\x25\xa7\xda\x50\xcd\x69\x84\x6e\xc2\x4a\x77\x06\x4e\xa7\x1e\xc1\xd5\x80\x2f\xbb\xde\xcd\xd0\x48\x83\x64\x7f\xf6\xec\x86\xcf\x4a\xe1\x1f\x67\x22\xe2\x13\xea\x33\x82\x01\xe0\x70\xf2\x62\xa8\x7f\x94\xf1\x7f\x11\xdf\xd4\xb6\x94\x95\xc6\xae\x2d\xed\xfb\x6a\x5c\x72\x8a\x62\x2e\x30\x15\xee\x66\x3d\xca\xeb\xfa\xd2\x81\x11\x21\xca\xf8\xed\x12\x7a\x3f\x29\x8e\x02\xbb\x01\xe9\xc0\x28\xd7\xd7\xab\x11\xe0\x7a\xf5\x39\xb0\x0e\x48\x6b\x63\x79\xd3\x44\x43\xd7\xab\x61\x03\x82\x88\xf9\xc5\x1f\xb1\x39\xca\xf8\x99\xc7\xa3\xfc\xae\x31\x6d\x9c\xf2\xca\x7d\x02\x6e\x77\xf6\xb7\xe0\x4e\x6b\x6b\x70\x71\x60\x25\xbf\x39\xfc\x09\xc7\x94\xf1\xd6\xd9\xcf\x32\x88\x3d\xe6\x13\x58\xb8\x05\x3b\x81\x3c\x17\xea\xa2\xf8\xff\x17\x10\x86\x8b\x61\xe9\x33\x58\x1a\x4a\x53\x75\x84\x85\xd9\xf6\x42\x02\x79\x2e\xc7\xcf\x5e\x90\x92\x5e\xb4\x1c\x97\x00\x3d\x0a\x43\x8f\xe1\x24\xcf\x15\x51\xb4\x58\x99\xc6\x84\xc3\xdd\xff\x45\x11\x0b\x33\x92\x38\x1e\x17\x98\x6a\xd3\x82\x2d\xd7\xf5\x2a\xdb\xac\xb9\x75\xce\x57\x3b\xcb\xc0\x8d\xbe\x9d\xcf\x24\xae\xeb\x99\xc3\xac\xce\x51\x64\x9f\xd2\x6b\x98\x12\x99\xcb\xf1\x62\x2f\xac\xaa\xa8\x5c\xf4\x08\x3e\x87\x29\x85\xbf\xf3\xfc\x1a\xb2\x8c\x30\xdc\x73\x4c\x49\x59\xc5\x96\x1c\x02\x31\x13\xb9\x5a\x7b\x91\x11\xf3\xcd\x68\x7b\xce\x47\x86\x5a\x73\xa5\xb8\xca\xe3\xb5\xf7\xcd\x9b\x4e\x3f\x8b\xc7\x27\x5e\xd6\x17\x7a\xeb\x43\x20\xdf\xdb\x09\x8f\xd3\x03\x87\x67\x12\x27\x34\x62\x08\x32\xa5\x3c\x45\x10\x7a\x3f\xa2\x78\xd3\x4c\x29\x13\xd3\x7c\xa3\x94\x95\xf4\x23\xcd\x5d\x39\xdc\xb4\x33\xb6\x3e\x46\x22\xdf\xaf\x00\x00\x00\xff\xff\xa8\x81\xf9\x51\xec\x06\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 1772, mode: os.FileMode(420), modTime: time.Unix(1556115985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/gl.tmpl": templatesGlTmpl,
	"templates/gles2.tmpl": templatesGles2Tmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"gl.tmpl": &bintree{templatesGlTmpl, map[string]*bintree{}},
		"gles2.tmpl": &bintree{templatesGles2Tmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

