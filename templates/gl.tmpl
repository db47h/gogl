// Code generated by gogl (https://github.com/db47h/gogl); DO NOT EDIT

{{- if .Tags }}

// +build {{ .Tags }}
{{- end }}

package {{ .Package }}

/*
{{- /* Generate C stubs */}}
#cgo linux freebsd    pkg-config: gl
#cgo                  CFLAGS: -DGOTAG_gl

#include "gl.h"
#include <stdio.h>

struct Version_ GLVersion;

{{- range .Commands}}
    {{- $ret := .Type.GoName true }}

PFN{{ ToUpper .Name }} pfn_{{ .Name }} = NULL;
{{ .Type.CName }} gogl_{{.Name}}(
    {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.CDecl $e.Name}}
    {{- end }}) {
    {{if $ret}}return {{end -}}
    {{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Name}}
        {{- end }});
}
{{- end }}

typedef void* (* GROGloadproc)(const char *name);

int gogl_Init(GROGloadproc loader) {
    int major, minor;
    GLVersion.major = 0; GLVersion.minor = 0;
    if ((pfn_glGetString = (PFNGLGETSTRING)loader("glGetString")) == NULL) return 0;
    const char *ver = (const char *)glGetString(GL_VERSION);
    if (ver == NULL) return 0;
    while (*ver != '\0' && (*ver < '0' || *ver > '9')) ver++;
    if (*ver == '\0') return 0;
#ifdef _MSC_VER
    sscanf_s(ver, "%d.%d", &major, &minor);
#else
    sscanf(ver, "%d.%d", &major, &minor);
#endif
    GLVersion.major = major; GLVersion.minor = minor;
{{ $v := NewVersion 1 0 }}
{{- range .Commands }}
    {{- if $v.Less .Version }}
    {{- $v = .Version }}

    // OpenGL {{ .Version.String }}
    if (GLVersion.major < {{ .Version.Major }} || (GLVersion.major == {{ .Version.Major }} && GLVersion.minor < {{ .Version.Minor }})) return 1;
    {{- end}}
    if ((pfn_{{.Name}} = (PFN{{ ToUpper .Name }})loader("{{.Name}}")) == NULL) return 0;
{{- end }}
    return 1;
}

*/
import "C"
import (
    "errors"
    "fmt"
    "strings"
    "unsafe"
)

// CoreProfile is true if the API was configured for the OpenGL core profile.
// This is always false if API is GLES2.
//
const CoreProfile = {{ if eq .Profile "core" }}true{{ else }}false{{ end}}

// API type: OpenGL or OpenGLES.
//
type API int

// API Values.
//
const (
    OpenGL API = iota
    OpenGLES
)

func (a API) String() string {
    if a == OpenGL {
        return "OpenGL"
    }
    return "OpenGLES"
}

// Version represents an API version.
//
type Version struct {
    API   API
    Major int
    Minor int
}

// GE returns true if version v is greater or equal to Version{api, major, minor}
// and v.API is equal to the api argument.
//
// The following example shows how to use it in compatibility checks:
//
//  ver := gl.RuntimeVersion()
//  switch ver {
//  case ver.GE(OpenGL, 4, 0) || ver.GE(OpenGLES, 3, 1):
//      // call glDrawArraysIndirect
//  case ver.GE(OpenGL, 3, 1) || ver.GE(OpenGLES, 3, 0):
//      // call glDrawArraysInstanced
//  default:
//      // fallback
//  }
//
func (v Version) GE(api API, major, minor int) bool {
    return v.API == api && (v.Major > major || v.Major == major && v.Minor >= minor)
}

// APIVersion returns the OpenGL or OpenGLES version supported by the package.
//
func APIVersion() Version {
    return Version{
        {{- if eq .API "gl"}}OpenGL{{ else }}OpenGLES{{ end }}, {{ .Version.Major }}, {{ .Version.Minor -}}
    }
}

// RuntimeVersion returns the OpenGL or OpenGLES version available at runtime,
// which may differ from APIVersion.
//
func RuntimeVersion() Version {
    return Version{
        {{- if eq .API "gl"}}OpenGL{{ else }}OpenGLES{{ end -}}
        , int(C.GLVersion.major), int(C.GLVersion.minor)}
}

// InitC initializes OpenGL. loader is a function pointer to a C function of type
//
//  typedef void *(*loader) (const char *funcName)
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitC(loader unsafe.Pointer) error {
	if C.gogl_Init((C.GROGloadproc)(loader)) == 0 {
        return errors.New("failed to initialize OpenGL")
    }
	return nil
}

// InitGo initializes OpenGL. The recommended value for loader is glfw.GetProcAddress.
// The loader function must panic on error.
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitGo(loader func(string) unsafe.Pointer) {
    ver := Version{OpenGL, -1, -1}

	C.pfn_glGetString = C.PFNGLGETSTRING(loader("glGetString"))
	vs := C.GoString((*C.char)(unsafe.Pointer(C.gogl_glGetString(GL_VERSION))))
    i := strings.IndexFunc(vs, func(r rune) bool {
        return r >= '0' && r <= '9'
    })
    if i >= 0 {
        fmt.Sscanf(vs[i:], "%d.%d", &ver.Major, &ver.Minor)
    }
    if !ver.GE(OpenGL, 1, 0) {
        panic("failed to identify OpenGL version")
    }
    C.GLVersion.major = C.int(ver.Major)
    C.GLVersion.minor = C.int(ver.Minor)
{{ $v := NewVersion 1 0 }}
{{- range .Commands }}
    {{- if $v.Less .Version }}
    {{- $v = .Version }}

    // OpenGL {{ .Version.String }}
    if !ver.GE(OpenGL, {{ .Version.Major }}, {{ .Version.Minor }}) {
        return
    }
    {{- end}}
    C.pfn_{{.Name}} = C.PFN{{ ToUpper .Name }}(loader("{{.Name}}"))
{{- end }}
}

// GL Constants
//
const (
{{- range .Enums}}
	{{ .Name }} = {{ .Value }}
{{- end}}
)

// GL Functions
//

{{- range .Commands}}
{{- $ret := .Type.GoName true }}

func {{.GoName}}(
    {{- range $i, $e := .Params}}
    {{- if gt $i 0}}, {{end}}
    {{- $e.Name }} {{$e.Type.GoName false -}}
    {{- end -}}
) {{ $ret }} {
    {{if $ret}}ret := {{end -}}
    C.gogl_{{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.ToC $e.Name}}
        {{- end -}}
    )
    {{- if $ret}}
    return {{.Type.ToGo "ret"}}
    {{- end}}
}
{{- end }}
