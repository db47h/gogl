// Code generated by gogl; DO NOT EDIT
{{- if .Tags }}

// +build {{ .Tags }}
{{- end }}

package {{ .Package }}

/*
{{- /* Generate C stubs */}}
#cgo linux freebsd    pkg-config: gl
#cgo                  CFLAGS: -DGOTAG_gl

#include "gl.h"
#include <stdio.h>

struct Version_ GLVersion;

{{- range .Commands}}
    {{- $ret := .Type.GoName true }}

PFN{{ ToUpper .Name }} pfn_{{ .Name }} = NULL;
{{ .Type.CName }} gogl_{{.Name}}(
    {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.CDecl $e.Name}}
    {{- end }}) {
    {{if $ret}}return {{end -}}
    {{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Name}}
        {{- end }});
}
{{- end }}

typedef void* (* GROGloadproc)(const char *name);

int gogl_Init(GROGloadproc loader) {
    int major, minor;
    GLVersion.major = 0; GLVersion.minor = 0;
    if ((pfn_glGetString = (PFNGLGETSTRING)loader("glGetString")) == NULL) return 0;
    const char *ver = (const char *)glGetString(GL_VERSION);
    if (ver == NULL) return 0;
    while (*ver != '\0' && (*ver < '0' || *ver > '9')) ver++;
    if (*ver == '\0') return 0;
#ifdef _MSC_VER
    sscanf_s(ver, "%d.%d", &major, &minor);
#else
    sscanf(ver, "%d.%d", &major, &minor);
#endif
    GLVersion.major = major; GLVersion.minor = minor;
{{ $v := NewVersion 1 0 }}
{{- range .Commands }}
    {{- if $v.Less .Version }}
    {{- $v = .Version }}

    // OpenGL {{ .Version.String }}
    if (GLVersion.major < {{ .Version.Major }} || (GLVersion.major == {{ .Version.Major }} && GLVersion.minor < {{ .Version.Minor }})) return 1;
    {{- end}}
    if ((pfn_{{.Name}} = (PFN{{ ToUpper .Name }})loader("{{.Name}}")) == NULL) return 0;
{{- end }}
    return 1;
}

*/
import "C"
import (
    "errors"
    "fmt"
    "strings"
    "unsafe"
)

// CoreProfile is true if the API was configured for the OpenGL core profile.
// This is always false if API is GLES2.
//
const CoreProfile = {{ if eq .Profile "core" }}true{{ else }}false{{ end}}

// APIVersionMajor and APIVersionMinor represent the supported API version.
// To query the runtime API version, use the Version function.
//
const (
    APIVersionMajor = {{ .Version.Major }}
    APIVersionMinor = {{ .Version.Minor }}
)

// API Values.
//
const (
    GL = iota
    GLES2
)

// API in use: GL or GLES2.
//
const (
    API = {{if eq .API "gl"}}GL{{ else }}GLES2{{ end }}
    APIString = {{if eq .API "gl"}}"GL"{{ else }}"GLES2"{{ end }}
)

// InitC initializes OpenGL. loader is a function pointer to a C function of type
//
//  typedef void *(*loader) (const char *funcName)
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitC(loader unsafe.Pointer) error {
	if C.gogl_Init((C.GROGloadproc)(loader)) == 0 {
        return errors.New("failed to initialize OpenGL")
    }
	return nil
}

// InitGo initializes OpenGL. The recommended value for loader is glfw.GetProcAddress.
// The loader function must panic on error.
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitGo(loader func(string) unsafe.Pointer) {
    var (
        major = -1
        minor = -1
    )
	C.pfn_glGetString = C.PFNGLGETSTRING(loader("glGetString"))
	ver := C.GoString((*C.char)(unsafe.Pointer(C.gogl_glGetString(GL_VERSION))))
    i := strings.IndexFunc(ver, func(r rune) bool {
        return r >= '0' && r <= '9'
    })
    if i >= 0 {
        fmt.Sscanf(ver[i:], "%d.%d", &major, &minor)
    }
    if major < 0 || minor < 0 {
        panic("failed to identify OpenGL version")
    }
    C.GLVersion.major = C.int(major)
    C.GLVersion.minor = C.int(minor)
{{ $v := NewVersion 1 0 }}
{{- range .Commands }}
    {{- if $v.Less .Version }}
    {{- $v = .Version }}

    // OpenGL {{ .Version.String }}
    if major < {{ .Version.Major }} || (major == {{ .Version.Major }} && minor < {{ .Version.Minor }}) {
        return
    }
    {{- end}}
    C.pfn_{{.Name}} = C.PFN{{ ToUpper .Name }}(loader("{{.Name}}"))
{{- end }}
}

// Version returns the runtime OpenGL or OpenGLES version.
//
func Version() (major, minor int) {
    return int(C.GLVersion.major), int(C.GLVersion.minor)
}

// GL Constants
//
const (
{{- range .Enums}}
	{{ .Name }} = {{ .Value }}
{{- end}}
)

// GL Functions
//

{{- range .Commands}}
{{- $ret := .Type.GoName true }}

func {{.GoName}}(
    {{- range $i, $e := .Params}}
    {{- if gt $i 0}}, {{end}}
    {{- $e.Name }} {{$e.Type.GoName false -}}
    {{- end -}}
) {{ $ret }} {
    {{if $ret}}ret := {{end -}}
    C.gogl_{{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.ToC $e.Name}}
        {{- end -}}
    )
    {{- if $ret}}
    return {{.Type.ToGo "ret"}}
    {{- end}}
}
{{- end }}
