// Code generated by gogl (https://github.com/db47h/gogl); DO NOT EDIT

{{- if .Tags }}

// +build {{ .Tags }}
{{- end }}

package {{ .Package }}

/*
{{- /* Generate C stubs */}}
#cgo linux freebsd    pkg-config: glesv2
#cgo                  CFLAGS: -DGOTAG_gles2

#include "gl.h"
#include <stdio.h>

struct Version_ GLVersion;

*/
import "C"
import (
    "fmt"
    "strings"
    "unsafe"
)

// CoreProfile is true if the API was configured for the OpenGL core profile.
// This is always false if API is GLES2.
//
const CoreProfile = {{ .CoreProfile }}

// API type: OpenGL or OpenGLES.
//
type API int

// API Values.
//
const (
    OpenGL API = iota
    OpenGLES
)

func (a API) String() string {
    if a == OpenGL {
        return "OpenGL"
    }
    return "OpenGLES"
}

// Version represents an API version.
//
type Version struct {
    API   API
    Major int
    Minor int
}

// GE returns true if version v is greater or equal to Version{api, major, minor}
// and v.API is equal to the api argument.
//
// The following example shows how to use it in compatibility checks:
//
//  ver := gl.RuntimeVersion()
//  switch ver {
//  case ver.GE(OpenGL, 4, 0) || ver.GE(OpenGLES, 3, 1):
//      // call glDrawArraysIndirect
//  case ver.GE(OpenGL, 3, 1) || ver.GE(OpenGLES, 3, 0):
//      // call glDrawArraysInstanced
//  default:
//      // fallback
//  }
//
func (v Version) GE(api API, major, minor int) bool {
    return v.API == api && (v.Major > major || v.Major == major && v.Minor >= minor)
}

// APIVersion returns the OpenGL or OpenGLES version supported by the package.
//
func APIVersion() Version {
    return Version{
        {{- if eq .API "gl"}}OpenGL{{ else }}OpenGLES{{ end }}, {{ .Version.Major }}, {{ .Version.Minor -}}
    }
}

// RuntimeVersion returns the OpenGL or OpenGLES version available at runtime,
// which may differ from APIVersion.
//
func RuntimeVersion() Version {
    return Version{
        {{- if eq .API "gl"}}OpenGL{{ else }}OpenGLES{{ end -}}
        , int(C.GLVersion.major), int(C.GLVersion.minor)}
}

// InitC initializes OpenGL. loader is a function pointer to a C function of type
//
//  typedef void *(*loader) (const char *funcName)
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitC(loader unsafe.Pointer) error {
	InitGo(nil)
    return nil
}

// InitGo initializes OpenGL. The recommended value for loader is glfw.GetProcAddress.
// The loader function must panic on error.
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitGo(loader func(string) unsafe.Pointer) {
    var (
        major = -1
        minor = -1
    )
	ver := C.GoString((*C.char)(unsafe.Pointer(C.glGetString(GL_VERSION))))
    i := strings.IndexFunc(ver, func(r rune) bool {
        return r >= '0' && r <= '9'
    })
    if i >= 0 {
        fmt.Sscanf(ver[i:], "%d.%d", &major, &minor)
    }
    if major < 0 || minor < 0 {
        panic("failed to identify OpenGLES version")
    }
    C.GLVersion.major = C.int(major)
    C.GLVersion.minor = C.int(minor)
}

// GL Constants
//
const (
{{- range .Enums}}
	{{ .Name }} = {{ .Value }}
{{- end}}
)

// GL Functions
//

{{- range .Commands}}
{{- $ret := .Type.GoName true }}

func {{.GoName}}(
    {{- range $i, $e := .Params}}
    {{- if gt $i 0}}, {{end}}
    {{- $e.Name }} {{$e.Type.GoName false -}}
    {{- end -}}
) {{ $ret }} {
    {{if $ret}}ret := {{end -}}
    C.{{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.ToC $e.Name}}
        {{- end -}}
    )
    {{- if $ret}}
    return {{.Type.ToGo "ret"}}
    {{- end}}
}
{{- end }}
